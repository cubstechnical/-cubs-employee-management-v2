workflows:
  ios-testflight-release:
    name: iOS TestFlight Release
    max_build_duration: 120
    environment:
      xcode: latest
      cocoapods: default
      node: 20.11.0
      vars:
        BUNDLE_ID: "com.cubstechnical.employee"
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        APP_STORE_APP_ID: "6752909710"
        DEVELOPMENT_TEAM: "GQCYASP5XS"
    integrations:
      app_store_connect: appstorekey
    scripts:
      - name: Install Node.js dependencies
        script: |
          echo "üì¶ Installing Node.js dependencies..."
          npm ci
      - name: Build Next.js app
        script: |
          echo "üèóÔ∏è Building Next.js production app..."
          npm run build
      - name: Sync Capacitor iOS
        script: |
          echo "üîÑ Syncing web assets with Capacitor iOS..."
          npx cap sync ios
      - name: Install CocoaPods
        script: |
          echo "üì± Installing CocoaPods dependencies..."
          cd ios/App
          pod install
          cd ../..
      - name: Set build number
        script: |
          echo "üî¢ Setting build number..."
          cd ios/App
          # Get latest build number from App Store Connect and increment
          LATEST_BUILD=$(agvtool what-version -terse)
          NEW_BUILD=$((LATEST_BUILD + 1))
          echo "Setting build number to: $NEW_BUILD"
          agvtool new-version -all $NEW_BUILD
          cd ../..
      - name: Configure code signing
        script: |
          echo "üîê Configuring code signing..."
          cd ios/App
          
          # Verify the project has the correct team ID
          echo "üîç Verifying DEVELOPMENT_TEAM in project:"
          if grep -q "DEVELOPMENT_TEAM = GQCYASP5XS" App.xcodeproj/project.pbxproj; then
            echo "‚úÖ DEVELOPMENT_TEAM found in project"
            grep -n "DEVELOPMENT_TEAM" App.xcodeproj/project.pbxproj
          else
            echo "‚ùå DEVELOPMENT_TEAM not found in project!"
            echo "This will cause the archive to have no team"
            exit 1
          fi
          
          # Ensure CODE_SIGN_STYLE is set to Automatic
          echo "üîç Verifying CODE_SIGN_STYLE is Automatic:"
          if grep -q "CODE_SIGN_STYLE = Automatic" App.xcodeproj/project.pbxproj; then
            echo "‚úÖ CODE_SIGN_STYLE is set to Automatic"
          else
            echo "‚ùå CODE_SIGN_STYLE is not set to Automatic!"
            exit 1
          fi
          
          cd ../..
      - name: Use provisioning profiles
        script: |
          echo "üîê Using provisioning profiles..."
          xcode-project use-profiles
      - name: Build and archive iOS app
        script: |
          echo "üèóÔ∏è Building and archiving iOS app..."
          cd ios/App
          
          # Build and archive with explicit team and signing settings
          xcodebuild -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -destination generic/platform=iOS \
            -archivePath ../../build/ios/archive/App.xcarchive \
            archive \
            DEVELOPMENT_TEAM=GQCYASP5XS \
            CODE_SIGN_STYLE=Automatic \
            CODE_SIGN_IDENTITY="" \
            PROVISIONING_PROFILE="" \
            PROVISIONING_PROFILE_SPECIFIER="" \
            -allowProvisioningUpdates \
            -allowProvisioningDeviceRegistration
          cd ../..
      - name: Verify archive has team
        script: |
          echo "üîç Verifying archive has development team..."
          if [ -d "build/ios/archive/App.xcarchive" ]; then
            echo "‚úÖ Archive created successfully"
            echo "Archive contents:"
            ls -la build/ios/archive/App.xcarchive/
            
            # Check if the archive has team information
            if [ -f "build/ios/archive/App.xcarchive/Info.plist" ]; then
              echo "Archive Info.plist content:"
              cat build/ios/archive/App.xcarchive/Info.plist | grep -i team || echo "No team information found in archive"
            fi
          else
            echo "‚ùå Archive not found!"
            exit 1
          fi
      - name: Setup Certificates
        script: |
          echo "üîê Setting up certificates..."
          
          # Check if P12 certificate is available
          if [ -n "$CERTIFICATE_P12" ] && [ -n "$CERTIFICATE_PASSWORD" ]; then
            echo "‚úÖ P12 certificate and password are available"
            
            # Create keychain
            echo "Creating keychain..."
            security create-keychain -p "" build.keychain
            security default-keychain -s build.keychain
            security unlock-keychain -p "" build.keychain
            security set-keychain-settings -t 3600 -u build.keychain
            
            # Import P12 certificate
            echo "Importing P12 certificate..."
            security import $CERTIFICATE_P12 -k build.keychain -P $CERTIFICATE_PASSWORD -T /usr/bin/codesign
            
            # Set certificate trust
            echo "Setting certificate trust..."
            security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
            
            echo "‚úÖ P12 certificate setup completed"
          else
            echo "‚ö†Ô∏è  P12 certificate not available, trying App Store Connect integration"
            echo "   Make sure you've configured the App Store Connect integration in Codemagic"
            echo "   Go to Codemagic ‚Üí Teams ‚Üí Integrations ‚Üí Apple Developer Portal"
            echo "   Set integration name to 'appstorekey' with your API credentials"
          fi
          
          # Check App Store Connect integration
          echo "üîç Checking App Store Connect integration..."
          if [ -n "$APP_STORE_CONNECT_API_KEY" ]; then
            echo "‚úÖ App Store Connect API key is available"
            echo "   Key ID: 8URUVR58Z4"
            echo "   Issuer ID: fde9acef-6408-4dab-b6ed-31f8a3e5817b"
          else
            echo "‚ùå App Store Connect API key is not available"
            echo "   This means the integration is not working"
            echo "   Go to Codemagic ‚Üí Teams ‚Üí Integrations ‚Üí Apple Developer Portal"
            echo "   Create new integration named 'appstorekey'"
          fi
      - name: Debug Certificate Setup
        script: |
          echo "üîç Debugging certificate setup..."
          echo "Bundle ID: $BUNDLE_ID"
          echo "App Store App ID: $APP_STORE_APP_ID"
          echo "Development Team: $DEVELOPMENT_TEAM"
          
          # Check if P12 certificate is available
          if [ -n "$CERTIFICATE_P12" ]; then
            echo "‚úÖ P12 certificate is available"
          else
            echo "‚ùå P12 certificate is not available"
            echo "   To fix: Go to Codemagic ‚Üí Environment variables ‚Üí Add CERTIFICATE_P12"
          fi
          
          if [ -n "$CERTIFICATE_PASSWORD" ]; then
            echo "‚úÖ Certificate password is available"
          else
            echo "‚ùå Certificate password is not available"
            echo "   To fix: Go to Codemagic ‚Üí Environment variables ‚Üí Add CERTIFICATE_PASSWORD"
          fi
          
          # Check App Store Connect integration
          if [ -n "$APP_STORE_CONNECT_API_KEY" ]; then
            echo "‚úÖ App Store Connect API key is available"
            echo "   API Key details:"
            echo "   - Key ID: 7C6BH8NKQY"
            echo "   - Issuer ID: fde9acef-6408-4dab-b6ed-31f8a3e5817b"
            echo "   - App Store App ID: $APP_STORE_APP_ID"
            echo "   - Bundle ID: $BUNDLE_ID"
          else
            echo "‚ùå App Store Connect API key is not available"
            echo "   To fix: Go to Codemagic ‚Üí Teams ‚Üí Integrations ‚Üí Apple Developer Portal"
            echo "   Set integration name to 'appstorekey' with your API credentials"
          fi
          
          # Check available certificates
          echo "Available certificates:"
          CERT_COUNT=$(security find-identity -v -p codesigning | grep -c "valid identities found" || echo "0")
          if [ "$CERT_COUNT" -gt 0 ]; then
            echo "‚úÖ Found $CERT_COUNT valid certificates:"
            security find-identity -v -p codesigning
          else
            echo "‚ùå No valid certificates found"
            echo "   This means the App Store Connect integration is not providing certificates"
            echo "   Possible issues:"
            echo "   1. API key has 'Developer' access instead of 'App Manager' or 'Admin'"
            echo "   2. Integration is not properly configured in Codemagic"
            echo "   3. App exists but certificates haven't been generated yet"
            echo "   Solutions:"
            echo "   1. Check API key permissions in App Store Connect"
            echo "   2. Verify integration is active in Codemagic"
            echo "   3. Wait 5-10 minutes after creating app in App Store Connect"
          fi
      - name: Export IPA with fallback options
        script: |
          echo "üì¶ Exporting IPA with fallback options..."
          echo "Checking if archive exists before export:"
          ls -la build/ios/archive/ || echo "Archive directory not found"
          ls -la build/ios/archive/*.xcarchive || echo "No .xcarchive files found"
          
          # Ensure export directory exists
          mkdir -p build/ios/ipa
          
          cd ios/App
          echo "Current directory: $(pwd)"
          echo "Archive path: ../../build/ios/archive/App.xcarchive"
          echo "Export path: ../../build/ios/ipa"
          echo "ExportOptions.plist exists: $(test -f ExportOptions.plist && echo 'Yes' || echo 'No')"
          
          echo "ExportOptions.plist content:"
          cat ExportOptions.plist || echo "Cannot read ExportOptions.plist"
          
          # Try automatic signing first
          echo "üîÑ Attempting export with automatic signing..."
          if xcodebuild -exportArchive \
            -archivePath ../../build/ios/archive/App.xcarchive \
            -exportPath ../../build/ios/ipa \
            -exportOptionsPlist ExportOptions.plist \
            -verbose; then
            echo "‚úÖ Export successful with automatic signing"
          else
            echo "‚ùå Automatic signing failed, trying manual signing with P12 certificate..."
            
            # Create manual signing ExportOptions.plist for P12 certificate
            cat > ExportOptions_manual.plist << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>GQCYASP5XS</string>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>compileBitcode</key>
              <false/>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>thinning</key>
              <string>&lt;none&gt;</string>
              <key>destination</key>
              <string>export</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>signingCertificate</key>
              <string>Apple Distribution</string>
          </dict>
          </plist>
          EOF
            
            echo "Manual ExportOptions.plist content:"
            cat ExportOptions_manual.plist
            
            # Try manual signing with P12 certificate
            echo "üîÑ Attempting export with manual signing and P12 certificate..."
            if xcodebuild -exportArchive \
              -archivePath ../../build/ios/archive/App.xcarchive \
              -exportPath ../../build/ios/ipa \
              -exportOptionsPlist ExportOptions_manual.plist \
              -verbose; then
              echo "‚úÖ Export successful with manual signing and P12 certificate"
            else
              echo "‚ùå Both automatic and manual signing failed"
              echo "üîç Debugging information:"
              echo "Archive contents:"
              ls -la ../../build/ios/archive/App.xcarchive/
              echo "Export directory contents:"
              ls -la ../../build/ios/ipa/ || echo "Export directory not found"
              echo "Available certificates:"
              security find-identity -v -p codesigning || echo "No certificates found"
              echo "Keychain contents:"
              security list-keychains
              exit 1
            fi
          fi
          
          echo "Export completed. Checking results:"
          ls -la ../../build/ios/ipa/ || echo "Export directory not found"
          find ../../build/ios/ipa/ -name "*.ipa" || echo "No IPA files in export directory"
          cd ../..
      - name: Verify build artifacts
        script: |
          echo "‚úÖ Verifying build artifacts..."
          echo "Checking build directory structure:"
          find build -type f -name "*.ipa" -o -name "*.xcarchive" 2>/dev/null || echo "No build artifacts found in build directory"
          
          # Check for IPA files in common locations
          if [ -d "build/ios/ipa" ] && [ "$(ls -A build/ios/ipa/*.ipa 2>/dev/null)" ]; then
            echo "‚úÖ IPA file found in build/ios/ipa/"
            ls -la build/ios/ipa/*.ipa
          else
            echo "‚ùå IPA file not found in expected locations"
            echo "Checking all possible locations:"
            find . -name "*.ipa" 2>/dev/null || echo "No IPA files found anywhere"
            exit 1
          fi
          
          # Check for archive files
          if [ -d "build/ios/archive" ] && [ "$(ls -A build/ios/archive/*.xcarchive 2>/dev/null)" ]; then
            echo "‚úÖ Archive found in build/ios/archive/"
            ls -la build/ios/archive/*.xcarchive
          else
            echo "‚ùå Archive not found in expected locations"
            echo "Checking all possible locations:"
            find . -name "*.xcarchive" 2>/dev/null || echo "No archive files found anywhere"
            exit 1
          fi
    artifacts:
      - build/ios/ipa/*.ipa
      - build/ios/archive/*.xcarchive
    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
        submit_to_app_store: false
        beta_groups:
          - "Internal Testing"
      email:
        recipients:
          - info@cubstechnical.com
        notify:
          success: true
          failure: true

  ios-simulator-build:
    name: iOS Simulator Build (Dry Run)
    max_build_duration: 60
    environment:
      xcode: latest
      cocoapods: default
      node: 20.11.0
      vars:
        BUNDLE_ID: "com.cubstechnical.employee"
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
    scripts:
      - name: Install Node.js dependencies
        script: |
          echo "üì¶ Installing Node.js dependencies..."
          npm ci
      - name: Build Next.js app
        script: |
          echo "üèóÔ∏è Building Next.js production app..."
          npm run build
      - name: Sync Capacitor iOS
        script: |
          echo "üîÑ Syncing web assets with Capacitor iOS..."
          npx cap sync ios
      - name: Install CocoaPods
        script: |
          echo "üì± Installing CocoaPods dependencies..."
          cd ios/App
          pod install
          cd ../..
      - name: Build for simulator (unsigned)
        script: |
          echo "üì± Building for iOS Simulator (unsigned)..."
          cd ios/App
          xcodebuild -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -destination 'platform=iOS Simulator,name=iPhone 14' \
            -derivedDataPath build/DerivedData \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_ALLOWED=NO \
            build
          cd ../..
      - name: Verify build
        script: |
          echo "‚úÖ Verifying iOS simulator build..."
          if [ -d "ios/App/build/DerivedData/Build/Products/Release-iphonesimulator" ]; then
            echo "‚úÖ iOS simulator build successful!"
            ls -la ios/App/build/DerivedData/Build/Products/Release-iphonesimulator/
          else
            echo "‚ùå iOS simulator build failed"
            exit 1
          fi
    artifacts:
      - ios/App/build/DerivedData/Build/Products/Release-iphonesimulator/*.app
    publishing:
      email:
        recipients:
          - info@cubstechnical.com
        notify:
          success: true
          failure: true

  android-build:
    name: Android Build
    max_build_duration: 60
    environment:
      groups:
        - google_play
      vars:
        PACKAGE_NAME: "com.cubstechnical.admin"
    scripts:
      - name: Set up environment
        script: |
          echo "üîß Setting up Android build environment..."
          export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
          export ANDROID_HOME=$HOME/Android/Sdk
          export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools
      - name: Install dependencies
        script: |
          echo "üì¶ Installing Node.js dependencies..."
          npm ci
      - name: Build Next.js app
        script: |
          echo "üèóÔ∏è Building Next.js production app..."
          npm run build
      - name: Sync Capacitor Android
        script: |
          echo "üîÑ Syncing web assets with Capacitor Android..."
          npx cap sync android
      - name: Build Android APK
        script: |
          echo "üì± Building Android APK..."
          cd android
          ./gradlew assembleDebug
          ./gradlew assembleRelease
          cd ..
      - name: Build Android AAB
        script: |
          echo "üì¶ Building Android App Bundle..."
          cd android
          ./gradlew bundleRelease
          cd ..
      - name: List build artifacts
        script: |
          echo "üìã Android build artifacts:"
          find android/app/build/outputs -name "*.apk" -o -name "*.aab" | head -10
    artifacts:
      - android/app/build/outputs/apk/debug/*.apk
      - android/app/build/outputs/apk/release/*.apk
      - android/app/build/outputs/bundle/release/*.aab
    publishing:
      google_play:
        credentials: $GOOGLE_PLAY_SERVICE_ACCOUNT_CREDENTIALS
        track: internal
      email:
        recipients:
          - info@cubstechnical.com
        notify:
          success: true
          failure: true