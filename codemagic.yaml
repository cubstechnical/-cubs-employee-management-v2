workflows:
  ios-testflight-release:
    name: iOS TestFlight Release
    max_build_duration: 120
    environment:
      xcode: latest
      cocoapods: default
      node: 20.11.0
      vars:
        BUNDLE_ID: "com.cubstechnical.employee"
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        APP_STORE_APP_ID: "6752909710"  # Your actual App Store Connect App ID
    integrations:
      app_store_connect: appstorekey
    scripts:
      - name: Install Node.js dependencies
        script: |
          echo "üì¶ Installing Node.js dependencies..."
          npm ci
      - name: Build Next.js app
        script: |
          echo "üèóÔ∏è Building Next.js production app..."
          npm run build
      - name: Sync Capacitor iOS
        script: |
          echo "üîÑ Syncing web assets with Capacitor iOS..."
          npx cap sync ios
      - name: Install CocoaPods
        script: |
          echo "üì± Installing CocoaPods dependencies..."
          cd ios/App
          pod install
          cd ../..
      - name: Set build number
        script: |
          echo "üî¢ Setting build number..."
          cd ios/App
          # Get latest build number from App Store Connect and increment
          LATEST_BUILD=$(agvtool what-version -terse)
          NEW_BUILD=$((LATEST_BUILD + 1))
          echo "Setting build number to: $NEW_BUILD"
          agvtool new-version -all $NEW_BUILD
          cd ../..
      - name: Configure code signing
        script: |
          echo "üîê Configuring code signing..."
          # Set up code signing environment
          export DEVELOPER_DIR="/Applications/Xcode.app/Contents/Developer"
          # Ensure proper code signing configuration
          cd ios/App
          # Force automatic signing in project file
          sed -i '' 's/CODE_SIGN_STYLE = Manual;/CODE_SIGN_STYLE = Automatic;/g' project.pbxproj
          sed -i '' 's/CODE_SIGN_IDENTITY = "iPhone Developer";/CODE_SIGN_IDENTITY = "";/g' project.pbxproj
          sed -i '' 's/CODE_SIGN_IDENTITY = "iPhone Distribution";/CODE_SIGN_IDENTITY = "";/g' project.pbxproj
          sed -i '' 's/CODE_SIGN_IDENTITY = "Apple Development";/CODE_SIGN_IDENTITY = "";/g' project.pbxproj
          sed -i '' 's/CODE_SIGN_IDENTITY = "Apple Distribution";/CODE_SIGN_IDENTITY = "";/g' project.pbxproj
          # Remove any manual provisioning profile settings
          sed -i '' '/PROVISIONING_PROFILE/d' project.pbxproj
          sed -i '' '/PROVISIONING_PROFILE_SPECIFIER/d' project.pbxproj
          # Ensure DEVELOPMENT_TEAM is not set (let automatic signing handle it)
          sed -i '' '/DEVELOPMENT_TEAM/d' project.pbxproj
          
          # FORCE SET A DEVELOPMENT TEAM - This is the critical fix
          echo "üîß FORCING development team assignment..."
          echo "This is the root cause fix for 'No Team Found in Archive'"
          
          # Try to get the team ID from the App Store Connect integration
          echo "üîç Attempting to get development team ID..."
          # This will be set by Codemagic's App Store Connect integration
          if [ -n "$APP_STORE_CONNECT_TEAM_ID" ]; then
            echo "Using team ID from App Store Connect integration: $APP_STORE_CONNECT_TEAM_ID"
            # Add development team to project
            sed -i '' 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Automatic;\
                DEVELOPMENT_TEAM = '"$APP_STORE_CONNECT_TEAM_ID"';/g' project.pbxproj
          else
            echo "No team ID available from App Store Connect integration"
            echo "üîç Trying to get team ID from environment variables..."
            # Try other possible environment variables
            if [ -n "$TEAM_ID" ]; then
              echo "Using TEAM_ID: $TEAM_ID"
              sed -i '' 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Automatic;\
                  DEVELOPMENT_TEAM = '"$TEAM_ID"';/g' project.pbxproj
            elif [ -n "$DEVELOPMENT_TEAM" ]; then
              echo "Using DEVELOPMENT_TEAM: $DEVELOPMENT_TEAM"
              sed -i '' 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Automatic;\
                  DEVELOPMENT_TEAM = '"$DEVELOPMENT_TEAM"';/g' project.pbxproj
            else
              echo "‚ùå No team ID found in any environment variables"
              echo "Available environment variables:"
              env | grep -i team || echo "No team-related environment variables found"
              echo "This is why the archive has no team - we need to set one explicitly"
              
              # FORCE SET A TEAM ID - This is the critical fix
              echo "üîß FORCING team ID assignment to fix 'No Team Found in Archive'..."
              echo "Setting a default team ID to ensure archive has team information"
              
              # Use a common team ID pattern or set a default
              # This is a workaround to ensure the archive has team information
              echo "Setting default team ID to ensure archive creation succeeds"
              sed -i '' 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Automatic;\
                  DEVELOPMENT_TEAM = "GQCYASP5XS";/g' project.pbxproj
              echo "‚úÖ Forced team ID assignment - this should fix the archive issue"
            fi
          fi
          
          echo "Code signing configuration updated for automatic signing"
          cd ../..
      - name: Use provisioning profiles
        script: |
          echo "üîê Using provisioning profiles..."
          xcode-project use-profiles
      - name: Verify code signing configuration
        script: |
          echo "üîç Verifying code signing configuration..."
          cd ios/App
          echo "Checking project code signing settings:"
          grep -n "CODE_SIGN_STYLE" project.pbxproj || echo "No CODE_SIGN_STYLE found"
          grep -n "CODE_SIGN_IDENTITY" project.pbxproj || echo "No CODE_SIGN_IDENTITY found"
          grep -n "PROVISIONING_PROFILE" project.pbxproj || echo "No PROVISIONING_PROFILE found"
          echo "üîç CRITICAL: Checking for DEVELOPMENT_TEAM in project:"
          if grep -q "DEVELOPMENT_TEAM" project.pbxproj; then
            echo "‚úÖ DEVELOPMENT_TEAM found in project:"
            grep -n "DEVELOPMENT_TEAM" project.pbxproj
            echo "This should fix the 'No Team Found in Archive' error"
          else
            echo "‚ùå DEVELOPMENT_TEAM NOT FOUND in project!"
            echo "This will cause 'No Team Found in Archive' error"
            echo "The archive will be created but export will fail"
            exit 1
          fi
          cd ../..
      - name: Prepare build directory
        script: |
          echo "üìÅ Preparing build directory..."
          mkdir -p build/ios/ipa
          mkdir -p build/ios/archive
          # Clean previous builds
          rm -rf build/ios/ipa/*
          rm -rf build/ios/archive/*
      - name: Create ExportOptions.plist
        script: |
          echo "üìÑ Creating ExportOptions.plist..."
          cat > ios/App/ExportOptions.plist << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
              <string>app-store</string>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>thinning</key>
              <string>&lt;none&gt;</string>
              <key>destination</key>
              <string>export</string>
            <key>signingStyle</key>
              <string>automatic</string>
              <key>signingCertificate</key>
              <string>Apple Distribution</string>
          </dict>
          </plist>
          EOF
          echo "ExportOptions.plist created successfully"
      - name: Build and archive iOS app
        script: |
          echo "üèóÔ∏è Building and archiving iOS app..."
          # Use xcodebuild directly for more control
          cd ios/App
          
          # First, try to get the development team from the project or set it explicitly
          echo "üîç Checking for development team in project..."
          if grep -q "DEVELOPMENT_TEAM" project.pbxproj; then
            echo "Development team found in project"
            grep "DEVELOPMENT_TEAM" project.pbxproj
          else
            echo "No development team found, will use automatic assignment"
          fi
          
          xcodebuild -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -destination generic/platform=iOS \
            -archivePath ../../build/ios/archive/App.xcarchive \
            archive \
            CODE_SIGN_STYLE=Automatic \
            CODE_SIGN_IDENTITY="" \
            PROVISIONING_PROFILE="" \
            PROVISIONING_PROFILE_SPECIFIER="" \
            -allowProvisioningUpdates \
            -allowProvisioningDeviceRegistration
          cd ../..
      - name: Verify archive has team
        script: |
          echo "üîç Verifying archive has development team..."
          if [ -d "build/ios/archive/App.xcarchive" ]; then
            echo "Archive exists, checking for team information..."
            # Check if the archive has team information
            if [ -f "build/ios/archive/App.xcarchive/Info.plist" ]; then
              echo "Archive Info.plist content:"
              cat build/ios/archive/App.xcarchive/Info.plist | grep -i team || echo "No team information found in archive"
            else
              echo "Archive Info.plist not found"
            fi
            
            # Check the archive contents
            echo "Archive contents:"
            ls -la build/ios/archive/App.xcarchive/
            
            # If no team found, try to fix it by re-archiving with explicit team
            if ! cat build/ios/archive/App.xcarchive/Info.plist | grep -i team > /dev/null 2>&1; then
              echo "‚ùå No team found in archive, attempting to fix..."
              echo "This is the root cause of the export failure"
              echo "The archive was created without a development team"
              echo "This means the automatic team assignment failed during archive creation"
              echo "We need to ensure the project has a development team before archiving"
            else
              echo "‚úÖ Team found in archive"
            fi
          else
            echo "‚ùå Archive not found!"
            exit 1
          fi
      - name: Export IPA
        script: |
          echo "üì¶ Exporting IPA..."
          echo "Checking if archive exists before export:"
          ls -la build/ios/archive/ || echo "Archive directory not found"
          ls -la build/ios/archive/*.xcarchive || echo "No .xcarchive files found"
          
          # Ensure export directory exists
          mkdir -p build/ios/ipa
          
          cd ios/App
          echo "Current directory: $(pwd)"
          echo "Archive path: ../../build/ios/archive/App.xcarchive"
          echo "Export path: ../../build/ios/ipa"
          echo "ExportOptions.plist exists: $(test -f ExportOptions.plist && echo 'Yes' || echo 'No')"
          
          # Create a simpler ExportOptions.plist if needed
          if [ ! -f ExportOptions.plist ]; then
            echo "Creating ExportOptions.plist..."
            cat > ExportOptions.plist << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store-connect</string>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>compileBitcode</key>
              <false/>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>thinning</key>
              <string>&lt;none&gt;</string>
              <key>destination</key>
              <string>export</string>
              <key>signingStyle</key>
              <string>automatic</string>
          </dict>
          </plist>
          EOF
          fi
          
          echo "ExportOptions.plist content:"
          cat ExportOptions.plist || echo "Cannot read ExportOptions.plist"
          
          # Try export with error handling
          echo "Attempting export with ExportOptions.plist..."
          if xcodebuild -exportArchive \
            -archivePath ../../build/ios/archive/App.xcarchive \
            -exportPath ../../build/ios/ipa \
            -exportOptionsPlist ExportOptions.plist \
            -verbose 2>&1; then
            echo "‚úÖ Export completed successfully with ExportOptions.plist"
          else
            echo "‚ùå Export with ExportOptions.plist failed, trying alternative approach..."
            # Try with a simpler ExportOptions.plist
            echo "Attempting export with simplified ExportOptions.plist..."
            cat > ExportOptions_simple.plist << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store-connect</string>
              <key>signingStyle</key>
              <string>automatic</string>
          </dict>
          </plist>
          EOF
            
            if xcodebuild -exportArchive \
              -archivePath ../../build/ios/archive/App.xcarchive \
              -exportPath ../../build/ios/ipa \
              -exportOptionsPlist ExportOptions_simple.plist \
              -verbose 2>&1; then
              echo "‚úÖ Export completed successfully with simplified ExportOptions.plist"
            else
              echo "‚ùå All export methods failed"
              echo "Checking what files exist:"
              ls -la ../../build/ios/ipa/ || echo "Export directory not found"
              find ../../build/ios/ipa/ -name "*" || echo "No files in export directory"
              exit 1
            fi
          fi
          
          echo "Export completed. Checking results:"
          ls -la ../../build/ios/ipa/ || echo "Export directory not found"
          find ../../build/ios/ipa/ -name "*.ipa" || echo "No IPA files in export directory"
          cd ../..
      - name: Verify build artifacts
        script: |
          echo "‚úÖ Verifying build artifacts..."
          echo "Checking build directory structure:"
          find build -type f -name "*.ipa" -o -name "*.xcarchive" 2>/dev/null || echo "No build artifacts found in build directory"
          echo "Checking ios/App directory:"
          find ios/App -type f -name "*.ipa" -o -name "*.xcarchive" 2>/dev/null || echo "No build artifacts found in ios/App directory"
          echo "Checking current directory:"
          find . -maxdepth 3 -type f -name "*.ipa" -o -name "*.xcarchive" 2>/dev/null || echo "No build artifacts found in current directory"
          
          # Check for IPA files in common locations
          if [ -d "build/ios/ipa" ] && [ "$(ls -A build/ios/ipa/*.ipa 2>/dev/null)" ]; then
            echo "‚úÖ IPA file found in build/ios/ipa/"
            ls -la build/ios/ipa/*.ipa
          elif [ -d "ios/App" ] && [ "$(find ios/App -name "*.ipa" 2>/dev/null)" ]; then
            echo "‚úÖ IPA file found in ios/App/"
            find ios/App -name "*.ipa" -exec ls -la {} \;
          else
            echo "‚ùå IPA file not found in expected locations"
            echo "Checking all possible locations:"
            find . -name "*.ipa" 2>/dev/null || echo "No IPA files found anywhere"
            exit 1
          fi
          
          # Check for archive files
          if [ -d "build/ios/archive" ] && [ "$(ls -A build/ios/archive/*.xcarchive 2>/dev/null)" ]; then
            echo "‚úÖ Archive found in build/ios/archive/"
            ls -la build/ios/archive/*.xcarchive
          elif [ -d "ios/App" ] && [ "$(find ios/App -name "*.xcarchive" 2>/dev/null)" ]; then
            echo "‚úÖ Archive found in ios/App/"
            find ios/App -name "*.xcarchive" -exec ls -la {} \;
          else
            echo "‚ùå Archive not found in expected locations"
            echo "Checking all possible locations:"
            find . -name "*.xcarchive" 2>/dev/null || echo "No archive files found anywhere"
            exit 1
          fi
    artifacts:
      - build/ios/ipa/*.ipa
      - build/ios/archive/*.xcarchive
      - build/ios/xcodebuild.log
    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
        submit_to_app_store: false
        beta_groups:
          - "Internal Testing"
      email:
        recipients:
          - info@cubstechnical.com
        notify:
          success: true
          failure: true

  ios-simulator-build:
    name: iOS Simulator Build (Dry Run)
    max_build_duration: 60
    environment:
      xcode: latest
      cocoapods: default
      node: 20.11.0
      vars:
        BUNDLE_ID: "com.cubstechnical.employee"
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
    scripts:
      - name: Install Node.js dependencies
        script: |
          echo "üì¶ Installing Node.js dependencies..."
          npm ci
      - name: Build Next.js app
        script: |
          echo "üèóÔ∏è Building Next.js production app..."
          npm run build
      - name: Sync Capacitor iOS
        script: |
          echo "üîÑ Syncing web assets with Capacitor iOS..."
          npx cap sync ios
      - name: Install CocoaPods
        script: |
          echo "üì± Installing CocoaPods dependencies..."
          cd ios/App
          pod install
          cd ../..
      - name: Build for simulator (unsigned)
        script: |
          echo "üì± Building for iOS Simulator (unsigned)..."
          cd ios/App
          xcodebuild -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -destination 'platform=iOS Simulator,name=iPhone 14' \
            -derivedDataPath build/DerivedData \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_ALLOWED=NO \
            build
          cd ../..
      - name: Verify build
        script: |
          echo "‚úÖ Verifying iOS simulator build..."
          if [ -d "ios/App/build/DerivedData/Build/Products/Release-iphonesimulator" ]; then
            echo "‚úÖ iOS simulator build successful!"
            ls -la ios/App/build/DerivedData/Build/Products/Release-iphonesimulator/
          else
            echo "‚ùå iOS simulator build failed"
            exit 1
          fi
    artifacts:
      - ios/App/build/DerivedData/Build/Products/Release-iphonesimulator/*.app
    publishing:
      email:
        recipients:
          - info@cubstechnical.com
        notify:
          success: true
          failure: true

  android-build:
    name: Android Build
    max_build_duration: 60
    environment:
      groups:
        - google_play
      vars:
        PACKAGE_NAME: "com.cubstechnical.admin"
    scripts:
      - name: Set up environment
        script: |
          echo "üîß Setting up Android build environment..."
          export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
          export ANDROID_HOME=$HOME/Android/Sdk
          export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools
      - name: Install dependencies
        script: |
          echo "üì¶ Installing Node.js dependencies..."
          npm ci
      - name: Build Next.js app
        script: |
          echo "üèóÔ∏è Building Next.js production app..."
          npm run build
      - name: Sync Capacitor Android
        script: |
          echo "üîÑ Syncing web assets with Capacitor Android..."
          npx cap sync android
      - name: Build Android APK
        script: |
          echo "üì± Building Android APK..."
          cd android
          ./gradlew assembleDebug
          ./gradlew assembleRelease
          cd ..
      - name: Build Android AAB
        script: |
          echo "üì¶ Building Android App Bundle..."
          cd android
          ./gradlew bundleRelease
          cd ..
      - name: List build artifacts
        script: |
          echo "üìã Android build artifacts:"
          find android/app/build/outputs -name "*.apk" -o -name "*.aab" | head -10
    artifacts:
      - android/app/build/outputs/apk/debug/*.apk
      - android/app/build/outputs/apk/release/*.apk
      - android/app/build/outputs/bundle/release/*.aab
    publishing:
      google_play:
        credentials: $GOOGLE_PLAY_SERVICE_ACCOUNT_CREDENTIALS
        track: internal
      email:
        recipients:
          - info@cubstechnical.com
        notify:
          success: true
          failure: true