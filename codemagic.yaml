workflows:
  ios-testflight-release:
    name: iOS TestFlight Release
    max_build_duration: 120
    environment:
      xcode: latest
      cocoapods: default
      node: 20.11.0
      vars:
        BUNDLE_ID: "com.cubstechnical.employee"
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        APP_STORE_APP_ID: "6752909710"  # Your actual App Store Connect App ID
    integrations:
      app_store_connect: appstorekey
    scripts:
      - name: Install Node.js dependencies
        script: |
          echo "üì¶ Installing Node.js dependencies..."
          npm ci
      - name: Build Next.js app
        script: |
          echo "üèóÔ∏è Building Next.js production app..."
          npm run build
      - name: Sync Capacitor iOS
        script: |
          echo "üîÑ Syncing web assets with Capacitor iOS..."
          npx cap sync ios
      - name: Install CocoaPods
        script: |
          echo "üì± Installing CocoaPods dependencies..."
          cd ios/App
          pod install
          cd ../..
      - name: Set build number
        script: |
          echo "üî¢ Setting build number..."
          cd ios/App
          # Get latest build number from App Store Connect and increment
          LATEST_BUILD=$(agvtool what-version -terse)
          NEW_BUILD=$((LATEST_BUILD + 1))
          echo "Setting build number to: $NEW_BUILD"
          agvtool new-version -all $NEW_BUILD
          cd ../..
      - name: Force provisioning profile generation
        script: |
          echo "üîê Forcing provisioning profile generation..."
          # Force Codemagic to generate provisioning profiles
          xcode-project use-profiles
          # Alternative: try to build without signing first to trigger profile generation
          echo "Attempting to trigger profile generation..."
          cd ios/App
          xcodebuild -workspace App.xcworkspace -scheme App -configuration Release -destination 'generic/platform=iOS' -allowProvisioningUpdates clean
          cd ../..
      - name: Build and archive iOS app
        script: |
          echo "üèóÔ∏è Building and archiving iOS app..."
          xcode-project build-ipa \
            --workspace "$XCODE_WORKSPACE" \
            --scheme "$XCODE_SCHEME"
    artifacts:
      - build/ios/ipa/*.ipa
      - build/ios/archive.xcarchive
      - build/ios/xcodebuild.log
    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
        submit_to_app_store: false
        beta_groups:
          - "Internal Testing"
      email:
        recipients:
          - info@cubstechnical.com
        notify:
          success: true
          failure: true

  ios-simulator-build:
    name: iOS Simulator Build (Dry Run)
    max_build_duration: 60
    environment:
      xcode: latest
      cocoapods: default
      node: 20.11.0
      vars:
        BUNDLE_ID: "com.cubstechnical.employee"
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
    scripts:
      - name: Install Node.js dependencies
        script: |
          echo "üì¶ Installing Node.js dependencies..."
          npm ci
      - name: Build Next.js app
        script: |
          echo "üèóÔ∏è Building Next.js production app..."
          npm run build
      - name: Sync Capacitor iOS
        script: |
          echo "üîÑ Syncing web assets with Capacitor iOS..."
          npx cap sync ios
      - name: Install CocoaPods
        script: |
          echo "üì± Installing CocoaPods dependencies..."
          cd ios/App
          pod install
          cd ../..
      - name: Build for simulator (unsigned)
        script: |
          echo "üì± Building for iOS Simulator (unsigned)..."
          cd ios/App
          xcodebuild -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -destination 'platform=iOS Simulator,name=iPhone 14' \
            -derivedDataPath build/DerivedData \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_ALLOWED=NO \
            build
          cd ../..
      - name: Verify build
        script: |
          echo "‚úÖ Verifying iOS simulator build..."
          if [ -d "ios/App/build/DerivedData/Build/Products/Release-iphonesimulator" ]; then
            echo "‚úÖ iOS simulator build successful!"
            ls -la ios/App/build/DerivedData/Build/Products/Release-iphonesimulator/
          else
            echo "‚ùå iOS simulator build failed"
            exit 1
          fi
    artifacts:
      - ios/App/build/DerivedData/Build/Products/Release-iphonesimulator/*.app
    publishing:
      email:
        recipients:
          - info@cubstechnical.com
        notify:
          success: true
          failure: true

  android-build:
    name: Android Build
    max_build_duration: 60
    environment:
      groups:
        - google_play
      vars:
        PACKAGE_NAME: "com.cubstechnical.admin"
    scripts:
      - name: Set up environment
        script: |
          echo "üîß Setting up Android build environment..."
          export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
          export ANDROID_HOME=$HOME/Android/Sdk
          export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools
      - name: Install dependencies
        script: |
          echo "üì¶ Installing Node.js dependencies..."
          npm ci
      - name: Build Next.js app
        script: |
          echo "üèóÔ∏è Building Next.js production app..."
          npm run build
      - name: Sync Capacitor Android
        script: |
          echo "üîÑ Syncing web assets with Capacitor Android..."
          npx cap sync android
      - name: Build Android APK
        script: |
          echo "üì± Building Android APK..."
          cd android
          ./gradlew assembleDebug
          ./gradlew assembleRelease
          cd ..
      - name: Build Android AAB
        script: |
          echo "üì¶ Building Android App Bundle..."
          cd android
          ./gradlew bundleRelease
          cd ..
      - name: List build artifacts
        script: |
          echo "üìã Android build artifacts:"
          find android/app/build/outputs -name "*.apk" -o -name "*.aab" | head -10
    artifacts:
      - android/app/build/outputs/apk/debug/*.apk
      - android/app/build/outputs/apk/release/*.apk
      - android/app/build/outputs/bundle/release/*.aab
    publishing:
      google_play:
        credentials: $GOOGLE_PLAY_SERVICE_ACCOUNT_CREDENTIALS
        track: internal
      email:
        recipients:
          - info@cubstechnical.com
        notify:
          success: true
          failure: true